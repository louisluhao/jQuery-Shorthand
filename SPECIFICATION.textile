h1. Shorthand Specification

*Version:* 0.1.0

h2. Simple Shorthand

Simple shorthand defines an HTML element, an optional ID, and any number of optional classes.

h3. Tag Shorthand

The first element of the shorthand must be the tag name, and is the only required component:

bc. "div"

This would generate the following element:

bc. <div></div>

h3. ID shorthand

The optional ID is defined by using the CSS symbol for ID, a hash mark (#). The ID must come after the tag.

bc. "div#my-div-id"

This would generate the following element:

bc. <div id="my-div-id"></div>

*Note*: If more than one ID is passed, the first will be used.

h3. Class Shorthand

The optional class(es) are defined by using the CSS symbol for class, a period (.). The classes must come after the tag.

You can have any number of classes defined.

bc. "div.my-class.my-other-class"

This would generate the following element:

bc. <div class="my-class my-other-class"></div>

h3. Attribute Shorthand

The optional attribute(s) are defined by using the CSS selector for attributes, [key=value]. The attributes must come after the tag.

You can have any number of attributes defined.

bc. "a[href=http://google.com][target=_blank]"

This would generate the following element:

bc. <a href="http://google.com" target="_blank"></a>

h3. Combination Shorthand

When using classes, IDs and attributes, the order of them is irrelevant, providing they come after the tag name.

bc. "div.my-class#my-div-id.my-other-class[name=my-div-name]"

This would generate the following element:

bc. <div id="my-div-id" class="my-class my-other-class" name="my-div-name"></div>

h2. Advanced Shorthand

For shorthand which needs to describe an element in a way more complex than *tag shorthand*, *advanced shorthand* must be used.

The primary difference between *Tag* and *Advanced Shorthand* is the element type. An @Array@ object which contains *Tag Shorthand* as the first element is the basic structure of *Advanced Shorthand*.

An example of *Advanced Shorthand*:

bc. ["div#my-div-id.my-class"]

Is equivalent to the same *Tag Shorthand*:

bc. "div#my-div-id.my-class"

Both would generate the following element:

bc. <div id="my-div-id" class="my-class"></div>

h2. Text Content @Advanced Shorthand@

Text content can be provided as any string of text within *Advanced Shorthand* which is not the *Tag Shorthand*.

bc. ["span", "This is my span."]

This would generate the following element:

bc. <span>This is my span.</span>

h2. Attributes, jQuery Functions, and Styles @Advanced Shorthand@

Attributes, jQuery Functions, and Styles (AJS Shorthand) can be bound to an object through Advanced Shorthand. This is achieved by adding an @Object@ to the *Advanced Shorthand* declaration.

bc. ["input", {}]

Within this object, you can bind any combination of Element Attributes, jQuery Functions, and CSS Styles.

h3. Element Attributes @AJS Shorthand@

Event attributes are simply held within the AES object, and based on the key-value pairs provided to it.

bc. ["input", 
{
	type: "text", 
	name: "first-name"
}]


This would generate the following element:

bc. <input type="text" name="first-name" />

h3. jQuery Functions @AJS Shorthand@

jQuery functions can be set up for shorthand to call certain methods. Within the AJS object, using the key @$@ allows the defining of jQuery function calls.

One method of implementation with jQuery functionality is simply calling a function with a group of parameters. For example:

bc. ["input", 
{
	type: "text", 
	name: "first-name",
	$: 
	{
		"fadeIn": 
		[
			1500,
			"linear"
		]
	}
}]

This is analogous to:

bc. jQuery("input").fadeIn(1500, "linear");

You can also pass in functions, useful when binding event listeners:

bc. ["input", 
{
	type: "text", 
	name: "first-name",
	$: 
	{
		"focus": function ()
		{
			console.log("input focused");
		}
	}
}]

This is analogous to:

bc. jQuery("input").focus(function ()
{
	console.log("input focused");
});

To support passing binding functions over AJAX requests, the parser supports strings which can resolve into functions. Assuming the following setup:

bc. jQuery.my_plugin.specialClickHandler = function (event) { /* */ }

bc. ["input", 
{
	type: "text", 
	name: "first-name",
	$: 
	{
		"click": "jQuery::my_plugin::specialClickHandler"
	}
}]

These functions are always resolved starting at window scope. So this is analogous to:

bc. jQuery("input").focus(jQuery.my_plugin.specialClickHandler);

Finally, you can mix and match the function and parameter passing:

bc. ["input", 
{
	type: "button", 
	name: "first-name",
	$: 
	{
		"toggle": 
		[
			function (event)
			{
				console.log("blah");
			},
			"jQuery::my_plugin::toggleOut"
		]
	}
}]

This is analogous to:

bc. jQuery("input").toggle(function (event)
{
	console.log("blah");
}, jQuery.my_plugin.toggleOut);

h3. CSS Styles @AJS Shorthand@

Finally, CSS Styles can be passed with the shorthand using the @_@ key.

bc. ["input", 
{
	type: "button", 
	name: "first-name",
	_:
	{
		"backgroundColor": "#F00"
	}
}]

This would generate the following element:

bc. <input type="text" name="first-name" style="background-color: #F00;" />

h2. Child Elements @Advanced Shorthand@

Child elements can be provided within complex shorthand declarations as an array only.

bc. ["div.container",
	["span.a", "A"],
	["span.b", "B"],
	["span.c", "C"]
]

This is analogous to:

bc. <div class="container">
	<span class="a">A</span>
	<span class="b">B</span>
	<span class="c">C</span>
</div>

h2. Complex Shorthand

Complex shorthand describes unique combinations of @Advanced Shorthand@.

h2. Sibling Elements @Complex Shorthand@

If you need to create a group of sibling elements which exist outside of any specific container, an array of shorthand arrays
can be provided, and the resulting element will contain all of the elements.

bc. [
	["h1", "Some Header"],
	["blockquote", "Some Text"]
]

This is analogous to:

bc. <h1>Some Header</h1>
<blockquote>Some Text</blockquote>

And the resulting object is analogous to:

bc. jQuery("h1, blockquote")

h2. Item Groups @Complex Shorthand@

By providing a standard declaration in which the tag declaration contains an ampersand @&@, an item group is specified, allowing
a single tag/class declaration to be configured as different instances using the configurations in the other elements.

bc. ["&option.my-option", 
	[
		{
			value: "1"
		},	
		"Option 1"
	],
	[
		{
			value: "2"
		},
		"Option 2"
	]
]

This is analogous to:

bc. <option class="my-option" value="1">Option 1</option>
<option class="my-option" value="2">Option 2</option>

The shorthand instances provided as array element within the container should not contain tag definitions.
